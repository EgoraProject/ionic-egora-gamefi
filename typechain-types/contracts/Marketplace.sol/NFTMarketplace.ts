/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace NFTMarketplace {
  export type ListNFTStruct = {
    nft: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    payToken: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    sold: PromiseOrValue<boolean>;
  };

  export type ListNFTStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    nft: string;
    tokenId: BigNumber;
    seller: string;
    payToken: string;
    price: BigNumber;
    sold: boolean;
  };
}

export interface NFTMarketplaceInterface extends utils.Interface {
  functions: {
    "acceptOfferNFT(address,uint256,address)": FunctionFragment;
    "addPayableToken(address)": FunctionFragment;
    "bidPlace(address,uint256,uint256)": FunctionFragment;
    "buyNFT(address,uint256,address,uint256)": FunctionFragment;
    "calculatePlatformFee(uint256)": FunctionFragment;
    "calculateRoyalty(uint256,uint256)": FunctionFragment;
    "cancelAuction(address,uint256)": FunctionFragment;
    "cancelListedNFT(address,uint256)": FunctionFragment;
    "cancelOfferNFT(address,uint256)": FunctionFragment;
    "changeFeeRecipient(address)": FunctionFragment;
    "checkIsPayableToken(address)": FunctionFragment;
    "createAuction(address,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getListedNFT(address,uint256)": FunctionFragment;
    "getPayableTokens()": FunctionFragment;
    "listNft(address,uint256,address,uint256)": FunctionFragment;
    "offerNFT(address,uint256,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resultAuction(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePlatformFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOfferNFT"
      | "addPayableToken"
      | "bidPlace"
      | "buyNFT"
      | "calculatePlatformFee"
      | "calculateRoyalty"
      | "cancelAuction"
      | "cancelListedNFT"
      | "cancelOfferNFT"
      | "changeFeeRecipient"
      | "checkIsPayableToken"
      | "createAuction"
      | "getListedNFT"
      | "getPayableTokens"
      | "listNft"
      | "offerNFT"
      | "owner"
      | "renounceOwnership"
      | "resultAuction"
      | "transferOwnership"
      | "updatePlatformFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOfferNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPayableToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidPlace",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRoyalty",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListedNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOfferNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsPayableToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getListedNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNft",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resultAuction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOfferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPayableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bidPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOfferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsPayableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resultAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedNFT(address,uint256,address,uint256,address,address)": EventFragment;
    "BoughtNFT(address,uint256,address,uint256,address,address)": EventFragment;
    "CanceledOfferredNFT(address,uint256,address,uint256,address)": EventFragment;
    "CreatedAuction(address,uint256,address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "ListedNFT(address,uint256,address,uint256,address)": EventFragment;
    "OfferredNFT(address,uint256,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlacedBid(address,uint256,address,uint256,address)": EventFragment;
    "ResultedAuction(address,uint256,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoughtNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CanceledOfferredNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListedNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferredNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlacedBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResultedAuction"): EventFragment;
}

export interface AcceptedNFTEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  offerPrice: BigNumber;
  offerer: string;
  nftOwner: string;
}
export type AcceptedNFTEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string],
  AcceptedNFTEventObject
>;

export type AcceptedNFTEventFilter = TypedEventFilter<AcceptedNFTEvent>;

export interface BoughtNFTEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  price: BigNumber;
  seller: string;
  buyer: string;
}
export type BoughtNFTEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string],
  BoughtNFTEventObject
>;

export type BoughtNFTEventFilter = TypedEventFilter<BoughtNFTEvent>;

export interface CanceledOfferredNFTEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  offerPrice: BigNumber;
  offerer: string;
}
export type CanceledOfferredNFTEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  CanceledOfferredNFTEventObject
>;

export type CanceledOfferredNFTEventFilter =
  TypedEventFilter<CanceledOfferredNFTEvent>;

export interface CreatedAuctionEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  price: BigNumber;
  minBid: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
  creator: string;
}
export type CreatedAuctionEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  CreatedAuctionEventObject
>;

export type CreatedAuctionEventFilter = TypedEventFilter<CreatedAuctionEvent>;

export interface ListedNFTEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  price: BigNumber;
  seller: string;
}
export type ListedNFTEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  ListedNFTEventObject
>;

export type ListedNFTEventFilter = TypedEventFilter<ListedNFTEvent>;

export interface OfferredNFTEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  offerPrice: BigNumber;
  offerer: string;
}
export type OfferredNFTEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  OfferredNFTEventObject
>;

export type OfferredNFTEventFilter = TypedEventFilter<OfferredNFTEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlacedBidEventObject {
  nft: string;
  tokenId: BigNumber;
  payToken: string;
  bidPrice: BigNumber;
  bidder: string;
}
export type PlacedBidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  PlacedBidEventObject
>;

export type PlacedBidEventFilter = TypedEventFilter<PlacedBidEvent>;

export interface ResultedAuctionEventObject {
  nft: string;
  tokenId: BigNumber;
  creator: string;
  winner: string;
  price: BigNumber;
  caller: string;
}
export type ResultedAuctionEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  ResultedAuctionEventObject
>;

export type ResultedAuctionEventFilter = TypedEventFilter<ResultedAuctionEvent>;

export interface NFTMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _offerer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPayableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidPlace(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePlatformFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRoyalty(
      _royalty: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkIsPayableToken(
      _payableToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minBid: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.ListNFTStructOutput]>;

    getPayableTokens(overrides?: CallOverrides): Promise<[string[]]>;

    listNft(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offerNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _offerPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resultAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlatformFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOfferNFT(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _offerer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPayableToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidPlace(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _bidPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyNFT(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePlatformFee(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRoyalty(
    _royalty: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelAuction(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListedNFT(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOfferNFT(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFeeRecipient(
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkIsPayableToken(
    _payableToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createAuction(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _minBid: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getListedNFT(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.ListNFTStructOutput>;

  getPayableTokens(overrides?: CallOverrides): Promise<string[]>;

  listNft(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offerNFT(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _payToken: PromiseOrValue<string>,
    _offerPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resultAuction(
    _nft: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlatformFee(
    _platformFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _offerer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPayableToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidPlace(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePlatformFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRoyalty(
      _royalty: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkIsPayableToken(
      _payableToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minBid: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.ListNFTStructOutput>;

    getPayableTokens(overrides?: CallOverrides): Promise<string[]>;

    listNft(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    offerNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _offerPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resultAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedNFT(address,uint256,address,uint256,address,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      offerPrice?: null,
      offerer?: null,
      nftOwner?: PromiseOrValue<string> | null
    ): AcceptedNFTEventFilter;
    AcceptedNFT(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      offerPrice?: null,
      offerer?: null,
      nftOwner?: PromiseOrValue<string> | null
    ): AcceptedNFTEventFilter;

    "BoughtNFT(address,uint256,address,uint256,address,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      price?: null,
      seller?: null,
      buyer?: PromiseOrValue<string> | null
    ): BoughtNFTEventFilter;
    BoughtNFT(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      price?: null,
      seller?: null,
      buyer?: PromiseOrValue<string> | null
    ): BoughtNFTEventFilter;

    "CanceledOfferredNFT(address,uint256,address,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      offerPrice?: null,
      offerer?: PromiseOrValue<string> | null
    ): CanceledOfferredNFTEventFilter;
    CanceledOfferredNFT(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      offerPrice?: null,
      offerer?: PromiseOrValue<string> | null
    ): CanceledOfferredNFTEventFilter;

    "CreatedAuction(address,uint256,address,uint256,uint256,uint256,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      price?: null,
      minBid?: null,
      startTime?: null,
      endTime?: null,
      creator?: PromiseOrValue<string> | null
    ): CreatedAuctionEventFilter;
    CreatedAuction(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      price?: null,
      minBid?: null,
      startTime?: null,
      endTime?: null,
      creator?: PromiseOrValue<string> | null
    ): CreatedAuctionEventFilter;

    "ListedNFT(address,uint256,address,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null
    ): ListedNFTEventFilter;
    ListedNFT(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      price?: null,
      seller?: PromiseOrValue<string> | null
    ): ListedNFTEventFilter;

    "OfferredNFT(address,uint256,address,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      offerPrice?: null,
      offerer?: PromiseOrValue<string> | null
    ): OfferredNFTEventFilter;
    OfferredNFT(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      offerPrice?: null,
      offerer?: PromiseOrValue<string> | null
    ): OfferredNFTEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlacedBid(address,uint256,address,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      bidPrice?: null,
      bidder?: PromiseOrValue<string> | null
    ): PlacedBidEventFilter;
    PlacedBid(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      payToken?: null,
      bidPrice?: null,
      bidder?: PromiseOrValue<string> | null
    ): PlacedBidEventFilter;

    "ResultedAuction(address,uint256,address,address,uint256,address)"(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      creator?: null,
      winner?: PromiseOrValue<string> | null,
      price?: null,
      caller?: null
    ): ResultedAuctionEventFilter;
    ResultedAuction(
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      creator?: null,
      winner?: PromiseOrValue<string> | null,
      price?: null,
      caller?: null
    ): ResultedAuctionEventFilter;
  };

  estimateGas: {
    acceptOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _offerer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPayableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidPlace(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePlatformFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRoyalty(
      _royalty: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkIsPayableToken(
      _payableToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minBid: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    listNft(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offerNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _offerPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resultAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlatformFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _offerer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPayableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidPlace(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _bidPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePlatformFee(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRoyalty(
      _royalty: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOfferNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkIsPayableToken(
      _payableToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _minBid: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getListedNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayableTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listNft(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offerNFT(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _payToken: PromiseOrValue<string>,
      _offerPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resultAuction(
      _nft: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlatformFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
